#!/bin/bash

source glibc.var

if [ ! -e $LFS/logs1/$PACKAGE_NAME ]; then
	mkdir $LFS/logs1/$PACKAGE_NAME
fi

tar xf $PACKAGE_FILE


configure_commands()
{ :
cd $PACKAGE_DIR_NAME
mkdir -v build
cd build

../configure                             \
      --prefix=/tools                    \
      --host=$LFS_TGT                    \
      --build=$(../scripts/config.guess) \
      --disable-profile                  \
      --enable-kernel=2.6.32             \
      --enable-obsolete-rpc              \
      --with-headers=/tools/include      \
      libc_cv_forced_unwind=yes          \
      libc_cv_ctors_header=yes           \
      libc_cv_c_cleanup=yes

}

make_commands()
{ :
cd $PACKAGE_DIR_NAME/build
make
}

install_commands()
{ :
cd $PACKAGE_DIR_NAME/build
make install

echo 'int main(){}' > dummy.c
$LFS_TGT-gcc dummy.c
readelf -l a.out | grep ': /tools'

rm -v dummy.c a.out


}


test_pipe()
{
  for i in "${PIPESTATUS[@]}" 
  do
    test $i != 0 && { echo FAILED! ; exit 1 ; }
  done
  echo successful!
  return 0
}

echo -n Configuring...

{ configure_commands 3>&1 1>&2 2>&3 | tee "$LFS/logs1/$PACKAGE_NAME/configure.err" ;} &>"$LFS/logs1/$PACKAGE_NAME/configure.log"
test_pipe
# NOTE: Simply using && instead of test_pipe would not work, because &&
# only tests the exit status of the last command in the pipe, which is tee.

echo -n Building...

{ make_commands 3>&1 1>&2 2>&3 | tee "$LFS/logs1/$PACKAGE_NAME/make.err" ;} &>"$LFS/logs1/$PACKAGE_NAME/make.log"
test_pipe

echo -n Installing...

{ install_commands 3>&1 1>&2 2>&3 | tee "$LFS/logs1/$PACKAGE_NAME/install.err" ;} &>"$LFS/logs1/$PACKAGE_NAME/install.log"
test_pipe

rm -rf $PACKAGE_DIR_NAME
