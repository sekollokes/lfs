#!/bin/bash

source gcc.var

if [ ! -e $LFS/logs1/$PACKAGE_NAME ]; then
	mkdir $LFS/logs1/$PACKAGE_NAME
fi

tar xf $PACKAGE_FILE


configure_commands()
{ :
cd $PACKAGE_DIR_NAME

cat gcc/limitx.h gcc/glimits.h gcc/limity.h > \
  `dirname $($LFS_TGT-gcc -print-libgcc-file-name)`/include-fixed/limits.h

for file in \
 $(find gcc/config -name linux64.h -o -name linux.h -o -name sysv4.h)
do
  cp -uv $file{,.orig}
  sed -e 's@/lib\(64\)\?\(32\)\?/ld@/tools&@g' \
      -e 's@/usr@/tools@g' $file.orig > $file
  echo '
#undef STANDARD_STARTFILE_PREFIX_1
#undef STANDARD_STARTFILE_PREFIX_2
#define STANDARD_STARTFILE_PREFIX_1 "/tools/lib/"
#define STANDARD_STARTFILE_PREFIX_2 ""' >> $file
  touch $file.orig
done

tar -xf ../mpfr-3.1.3.tar.xz
mv -v mpfr-3.1.3 mpfr
tar -xf ../gmp-6.1.0.tar.xz
mv -v gmp-6.1.0 gmp
tar -xf ../mpc-1.0.3.tar.gz
mv -v mpc-1.0.3 mpc

mkdir -v build
cd build

CC=$LFS_TGT-gcc                                    \
CXX=$LFS_TGT-g++                                   \
AR=$LFS_TGT-ar                                     \
RANLIB=$LFS_TGT-ranlib                             \
../configure                                       \
    --prefix=/tools                                \
    --with-local-prefix=/tools                     \
    --with-native-system-header-dir=/tools/include \
    --enable-languages=c,c++                       \
    --disable-libstdcxx-pch                        \
    --disable-multilib                             \
    --disable-bootstrap                            \
    --disable-libgomp



}

make_commands()
{ :
cd $PACKAGE_DIR_NAME/build
make
}

install_commands()
{ :
cd $PACKAGE_DIR_NAME/build
make install

ln -sv gcc /tools/bin/cc

echo 'int main(){}' > dummy.c
cc dummy.c
readelf -l a.out | grep ': /tools'

rm -v dummy.c a.out

}


test_pipe()
{
  for i in "${PIPESTATUS[@]}" 
  do
    test $i != 0 && { echo FAILED! ; exit 1 ; }
  done
  echo successful!
  return 0
}

echo -n Configuring...

{ configure_commands 3>&1 1>&2 2>&3 | tee "$LFS/logs1/$PACKAGE_NAME/configure.err" ;} &>"$LFS/logs1/$PACKAGE_NAME/configure.log"
test_pipe
# NOTE: Simply using && instead of test_pipe would not work, because &&
# only tests the exit status of the last command in the pipe, which is tee.

echo -n Building...

{ make_commands 3>&1 1>&2 2>&3 | tee "$LFS/logs1/$PACKAGE_NAME/make.err" ;} &>"$LFS/logs1/$PACKAGE_NAME/make.log"
test_pipe

echo -n Installing...

{ install_commands 3>&1 1>&2 2>&3 | tee "$LFS/logs1/$PACKAGE_NAME/install.err" ;} &>"$LFS/logs1/$PACKAGE_NAME/install.log"
test_pipe

rm -rf $PACKAGE_DIR_NAME
